// This code was generated by XmlSchemaClassGenerator version 1.0.0.0 using the following command:
// XmlSchemaClassGenerator.Console --nc -o=entity schema.xsd
namespace TiqueteElectronico
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("EmisorType", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmisorType
    {
        
        /// <summary>
        /// <para>Nombre o razon social</para>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nombre o razon social")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Nombre")]
        public string Nombre { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Identificacion")]
        public IdentificacionType Identificacion { get; set; }
        
        /// <summary>
        /// <para>En caso de que se cuente con nombre comercial debe indicarse</para>
        /// <para xml:lang="en">Maximum length: 80.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("En caso de que se cuente con nombre comercial debe indicarse")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(80)]
        [System.Xml.Serialization.XmlElementAttribute("NombreComercial")]
        public string NombreComercial { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Ubicacion")]
        public UbicacionType Ubicacion { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Telefono", IsNullable=true)]
        public TelefonoType? Telefono { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Fax", IsNullable=true)]
        public TelefonoType? Fax { get; set; }
        
        /// <summary>
        /// <para>Debe cumplir con la siguiente estructura:
        ///                        \s*\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*\s*</para>
        /// <para xml:lang="en">Maximum length: 160.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Debe cumplir con la siguiente estructura: \\s*\\w+([-+.\']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([" +
            "-.]\\w+)*\\s*")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(160)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("CorreoElectronico")]
        public string CorreoElectronico { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("IdentificacionType", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IdentificacionType
    {
        
        /// <summary>
        /// <para>Tipo de identificación: 01 Cédula Física, 02 Cédula Jurídica,
        ///                        03 DIMEX, 04 NITE</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tipo de identificación: 01 Cédula Física, 02 Cédula Jurídica, 03 DIMEX, 04 NITE")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Tipo")]
        public IdentificacionTypeTipo Tipo { get; set; }
        
        /// <summary>
        /// <para>Número de identificación, el contribuyente debe estar inscrito
        ///                        ante la Administración Tributaria</para>
        /// <para xml:lang="en">Maximum length: 12.</para>
        /// <para xml:lang="en">Pattern: \d{9,12}.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Número de identificación, el contribuyente debe estar inscrito ante la Administra" +
            "ción Tributaria")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(12)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\d{9,12}")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Numero")]
        public string Numero { get; set; }
  }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("IdentificacionTypeTipo", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    public enum IdentificacionTypeTipo
    {
        
        /// <summary>
        /// <para>Cedula Fisica</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cedula Fisica")]
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Cedula_Fisica,
        
        /// <summary>
        /// <para>Cedula Juridica</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cedula Juridica")]
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Cedula_Juridica,
        
        /// <summary>
        /// <para>DIMEX</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("DIMEX")]
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        DIMEX,
        
        /// <summary>
        /// <para>NITE</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("NITE")]
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        NITE,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UbicacionType", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UbicacionType
    {
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 1.</para>
        /// <para xml:lang="en">Pattern: \d.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\d")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Provincia")]
        public byte Provincia { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 2.</para>
        /// <para xml:lang="en">Pattern: \d\d.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\d\\d")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Canton")]
        public string Canton { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 2.</para>
        /// <para xml:lang="en">Pattern: \d\d.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\d\\d")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Distrito")]
        public string Distrito { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 2.</para>
        /// <para xml:lang="en">Pattern: \d\d.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\d\\d")]
        [System.Xml.Serialization.XmlElementAttribute("Barrio")]
        public string Barrio { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Barrio property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BarrioSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 250.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(250)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("OtrasSenas")]
        public string OtrasSenas { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TelefonoType", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TelefonoType
    {
        
        /// <summary>
        /// <para>Código del país</para>
        /// <para xml:lang="en">Total number of digits: 3.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código del país")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("CodigoPais")]
        public short CodigoPais { get; set; }
        
        /// <summary>
        /// <para>Número de teléfono</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Número de teléfono")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("NumTelefono")]
        public decimal NumTelefono { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ReceptorType", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceptorType
    {
        
        /// <summary>
        /// <para>Nombre o razon social</para>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nombre o razon social")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Nombre")]
        public string Nombre { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Identificacion")]
        public IdentificacionType Identificacion { get; set; }
        
        /// <summary>
        /// <para>Este campo será de condición obligatoria, cuando el cliente lo
        ///                        requiera</para>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Este campo será de condición obligatoria, cuando el cliente lo requiera")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Xml.Serialization.XmlElementAttribute("IdentificacionExtranjero")]
        public string IdentificacionExtranjero { get; set; }
        
        /// <summary>
        /// <para>En caso de que se cuente con nombre comercial debe indicarse</para>
        /// <para xml:lang="en">Maximum length: 80.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("En caso de que se cuente con nombre comercial debe indicarse")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(80)]
        [System.Xml.Serialization.XmlElementAttribute("NombreComercial")]
        public string NombreComercial { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Ubicacion")]
        public UbicacionType Ubicacion { get; set; }
        
        /// <summary>
        /// <para>Campo para incluir la direccion del extranjero, en caso de
        ///                        requerirse.</para>
        /// <para xml:lang="en">Maximum length: 300.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Campo para incluir la direccion del extranjero, en caso de requerirse.")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(300)]
        [System.Xml.Serialization.XmlElementAttribute("OtrasSenasExtranjero")]
        public string OtrasSenasExtranjero { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Telefono")]
        public TelefonoType Telefono { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Fax")]
        public TelefonoType Fax { get; set; }
        
        /// <summary>
        /// <para>Este campo será de condición obligatoria, cuando el cliente lo
        ///                        requiera. Debe cumplir con la siguiente estructura:
        ///                        \s*\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*\s*</para>
        /// <para xml:lang="en">Maximum length: 160.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Este campo será de condición obligatoria, cuando el cliente lo requiera. Debe cum" +
            "plir con la siguiente estructura: \\s*\\w+([-+.\']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)" +
            "*\\s*")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(160)]
        [System.Xml.Serialization.XmlElementAttribute("CorreoElectronico")]
        public string CorreoElectronico { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ExoneracionType", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExoneracionType
    {
        
        /// <summary>
        /// <para>Tipo de documento de exoneración o autorización. 01 Compras
        ///                        Autorizadas, 02 Ventas exentas a diplomáticos, 03 Autorizado por Ley
        ///                        Especial, 04 Exenciones Dirección General de Hacienda, 05 Transitorio V, 06
        ///                        Transitorio IX, 07 Transitorio XVII, 99 Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tipo de documento de exoneración o autorización. 01 Compras Autorizadas, 02 Venta" +
            "s exentas a diplomáticos, 03 Autorizado por Ley Especial, 04 Exenciones Direcció" +
            "n General de Hacienda, 05 Transitorio V, 06 Transitorio IX, 07 Transitorio XVII," +
            " 99 Otros")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TipoDocumento")]
        public ExoneracionTypeTipoDocumento TipoDocumento { get; set; }
        
        /// <summary>
        /// <para>Número de documento de exoneración o autorización</para>
        /// <para xml:lang="en">Maximum length: 40.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Número de documento de exoneración o autorización")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(40)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("NumeroDocumento")]
        public string NumeroDocumento { get; set; }
        
        /// <summary>
        /// <para>Nombre de la institución o dependencia que emitió la
        ///                        exoneración</para>
        /// <para xml:lang="en">Maximum length: 160.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nombre de la institución o dependencia que emitió la exoneración")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(160)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("NombreInstitucion")]
        public string NombreInstitucion { get; set; }
        
        /// <summary>
        /// <para>Fecha y hora de la emisión del documento de exoneración o
        ///                        autorización.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Fecha y hora de la emisión del documento de exoneración o autorización.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("FechaEmision", DataType="dateTime")]
        public System.DateTime FechaEmision { get; set; }
        
        /// <summary>
        /// <para>Porcentaje de la exoneración</para>
        /// <para xml:lang="en">Total number of digits: 3.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Porcentaje de la exoneración")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("PorcentajeExoneracion")]
        public ushort PorcentajeExoneracion { get; set; }
        
        /// <summary>
        /// <para>Monto del impuesto exonerado</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Monto del impuesto exonerado")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("MontoExoneracion")]
        public decimal MontoExoneracion { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ExoneracionTypeTipoDocumento", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    public enum ExoneracionTypeTipoDocumento
    {
        
        /// <summary>
        /// <para>Compras Autorizadas</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Compras Autorizadas")]
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
        
        /// <summary>
        /// <para>Ventas exentas a diplomáticos</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ventas exentas a diplomáticos")]
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,
        
        /// <summary>
        /// <para>Autorizado por Ley Especial</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Autorizado por Ley Especial")]
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
        
        /// <summary>
        /// <para>Exenciones Direccion General de Hacienda</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Exenciones Direccion General de Hacienda")]
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
        
        /// <summary>
        /// <para>Transitorio V</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Transitorio V")]
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
        
        /// <summary>
        /// <para>Transitorio IX</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Transitorio IX")]
        [System.Xml.Serialization.XmlEnumAttribute("06")]
        Item06,
        
        /// <summary>
        /// <para>Transitorio XVII</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Transitorio XVII")]
        [System.Xml.Serialization.XmlEnumAttribute("07")]
        Item07,
        
        /// <summary>
        /// <para>Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Otros")]
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Item99,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ImpuestoType", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImpuestoType
    {
        
        /// <summary>
        /// <para>Código del impuesto: 01 Impuesto al valor agregado, 02
        ///                        Impuesto Selectivo de Consumo, 03 Impuesto único a los combustivos, 04
        ///                        Impuesto específico de bebidas alcohólicas, 05 Impuesto específico sobre las
        ///                        bebidas envasadas sin contenido alcohólico y jabones de tocador, 06 Impuesto
        ///                        a los productos de tabaco, 07 IVA (cálculo especial), 08 IVA Regimen de
        ///                        Bienes Usados (Factor), 12 Impuesto Especifico al cemento, 99 Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Código del impuesto: 01 Impuesto al valor agregado, 02 Impuesto Selectivo de Consumo, 03 Impuesto único a los combustivos, 04 Impuesto específico de bebidas alcohólicas, 05 Impuesto específico sobre las bebidas envasadas sin contenido alcohólico y jabones de tocador, 06 Impuesto a los productos de tabaco, 07 IVA (cálculo especial), 08 IVA Regimen de Bienes Usados (Factor), 12 Impuesto Especifico al cemento, 99 Otros")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Codigo")]
        public ImpuestoTypeCodigo Codigo { get; set; }
        
        /// <summary>
        /// <para>Código de la tarifa del impuesto. 01 Tarifa 0% (Exento), 02
        ///                        Tarifa Reducida 1%, 03 Tarifa reducida 2%, 04 Tarifa reducida 4%, 05
        ///                        Transitorio 0%, 06 Transitorio 4%, 07 Transitorio 8%, 08 Tarifa General 13%</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código de la tarifa del impuesto. 01 Tarifa 0% (Exento), 02 Tarifa Reducida 1%, 0" +
            "3 Tarifa reducida 2%, 04 Tarifa reducida 4%, 05 Transitorio 0%, 06 Transitorio 4" +
            "%, 07 Transitorio 8%, 08 Tarifa General 13%")]
        [System.Xml.Serialization.XmlElementAttribute("CodigoTarifa")]
        public ImpuestoTypeCodigoTarifa CodigoTarifa { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CodigoTarifa property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodigoTarifaSpecified { get; set; }
        
        /// <summary>
        /// <para>Tarifa del impuesto</para>
        /// <para xml:lang="en">Total number of digits: 4.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tarifa del impuesto")]
        [System.Xml.Serialization.XmlElementAttribute("Tarifa")]
        public int Tarifa { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Tarifa property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TarifaSpecified { get; set; }
        
        /// <summary>
        /// <para>Factor del impuesto</para>
        /// <para xml:lang="en">Total number of digits: 5.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 4.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Factor del impuesto")]
        [System.Xml.Serialization.XmlElementAttribute("FactorIVA")]
        public decimal FactorIVA { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FactorIVA property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FactorIVASpecified { get; set; }
        
        /// <summary>
        /// <para>Monto del impuesto</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Monto del impuesto")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Monto")]
        public decimal Monto { get; set; }
        
        [System.Xml.Serialization.XmlElementAttribute("Exoneracion")]
        public ExoneracionType Exoneracion { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ImpuestoTypeCodigo", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    public enum ImpuestoTypeCodigo
    {
        
        /// <summary>
        /// <para>Impuesto al Valor Agregado</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Impuesto al Valor Agregado")]
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        IVA,
        
        /// <summary>
        /// <para>Impuesto Selectivo de Consumo</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Impuesto Selectivo de Consumo")]
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,
        
        /// <summary>
        /// <para>Impuesto ünico a los combustivos</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Impuesto ünico a los combustivos")]
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
        
        /// <summary>
        /// <para>Impuesto especifico de bebidas alcohólicas</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Impuesto especifico de bebidas alcohólicas")]
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
        
        /// <summary>
        /// <para>impuesto especifico sobre las bebidas envasadas
        ///                                    sin contenido alcoholico y jabones de tocador</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("impuesto especifico sobre las bebidas envasadas sin contenido alcoholico y jabone" +
            "s de tocador")]
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
        
        /// <summary>
        /// <para>impuesto a los productos de tabaco</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("impuesto a los productos de tabaco")]
        [System.Xml.Serialization.XmlEnumAttribute("06")]
        Item06,
        
        /// <summary>
        /// <para>IVA (cálculo especial)</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("IVA (cálculo especial)")]
        [System.Xml.Serialization.XmlEnumAttribute("07")]
        Item07,
        
        /// <summary>
        /// <para>IVA Régimen de Bienes Usados (Factor)</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("IVA Régimen de Bienes Usados (Factor)")]
        [System.Xml.Serialization.XmlEnumAttribute("08")]
        Item08,
        
        /// <summary>
        /// <para>Impuesto Especifico al Cemento</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Impuesto Especifico al Cemento")]
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12,
        
        /// <summary>
        /// <para>Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Otros")]
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Item99,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ImpuestoTypeCodigoTarifa", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    public enum ImpuestoTypeCodigoTarifa
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
        
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,
        
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
        
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
        
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
        
        [System.Xml.Serialization.XmlEnumAttribute("06")]
        Item06,
        
        [System.Xml.Serialization.XmlEnumAttribute("07")]
        Item07,
        
        [System.Xml.Serialization.XmlEnumAttribute("08")]
        Item08,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CodigoType", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CodigoType
    {
        
        /// <summary>
        /// <para>Tipo de código de producto o servicio: 01: Código del producto
        ///                        del vendedor, 02 Código del producto del comprador, 03 Código del producto
        ///                        asignado por la industria, 04 Código de uso interno, 99 Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tipo de código de producto o servicio: 01: Código del producto del vendedor, 02 C" +
            "ódigo del producto del comprador, 03 Código del producto asignado por la industr" +
            "ia, 04 Código de uso interno, 99 Otros")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Tipo")]
        public CodigoTypeTipo Tipo { get; set; }
        
        /// <summary>
        /// <para>Código del producto o servicio</para>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código del producto o servicio")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Codigo")]
        public string Codigo { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CodigoTypeTipo", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    public enum CodigoTypeTipo
    {
        
        /// <summary>
        /// <para>Código del producto del vendedor</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código del producto del vendedor")]
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
        
        /// <summary>
        /// <para>Código del producto del comprador</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código del producto del comprador")]
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,
        
        /// <summary>
        /// <para>código del producto asignado por la industria</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("código del producto asignado por la industria")]
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
        
        /// <summary>
        /// <para>código de uso interno</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("código de uso interno")]
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
        
        /// <summary>
        /// <para>Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Otros")]
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Item99,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("DescuentoType", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DescuentoType
    {
        
        /// <summary>
        /// <para>Monto de descuento concedido, el cual es obligatorio si existe
        ///                        descuento</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Monto de descuento concedido, el cual es obligatorio si existe descuento")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("MontoDescuento")]
        public decimal MontoDescuento { get; set; }
        
        /// <summary>
        /// <para>Naturaleza del descuento, que es obligatorio si existe
        ///                        descuento</para>
        /// <para xml:lang="en">Maximum length: 80.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Naturaleza del descuento, que es obligatorio si existe descuento")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(80)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("NaturalezaDescuento")]
        public string NaturalezaDescuento { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OtrosCargosType", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OtrosCargosType
    {
        
        /// <summary>
        /// <para>01 Contribución parafiscal, 02 Timbre de la Cruz Roja, 03
        ///                        Timbre de Benemérito Cuerpo de Bomberos de Costa Rica, 04 Cobro de un
        ///                        tercero, 05 Costos de Exportación, 06 Impuesto de Servicio 10%, 07 Timbre de
        ///                        Colegios Profesionales, 99 Otros Cargos</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("01 Contribución parafiscal, 02 Timbre de la Cruz Roja, 03 Timbre de Benemérito Cu" +
            "erpo de Bomberos de Costa Rica, 04 Cobro de un tercero, 05 Costos de Exportación" +
            ", 06 Impuesto de Servicio 10%, 07 Timbre de Colegios Profesionales, 99 Otros Car" +
            "gos")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TipoDocumento")]
        public OtrosCargosTypeTipoDocumento TipoDocumento { get; set; }
        
        /// <summary>
        /// <para>Número de cédula física/ jurídica/NITE/DIMEX del emisor</para>
        /// <para xml:lang="en">Maximum length: 12.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Número de cédula física/ jurídica/NITE/DIMEX del emisor")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(12)]
        [System.Xml.Serialization.XmlElementAttribute("NumeroIdentidadTercero")]
        public string NumeroIdentidadTercero { get; set; }
        
        /// <summary>
        /// <para>Nombre o razón social del receptor</para>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nombre o razón social del receptor")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("NombreTercero")]
        public string NombreTercero { get; set; }
        
        /// <summary>
        /// <para>Detalle de otros cargos</para>
        /// <para xml:lang="en">Maximum length: 160.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Detalle de otros cargos")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(160)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Detalle")]
        public string Detalle { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 6.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Porcentaje")]
        public decimal Porcentaje { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Porcentaje property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PorcentajeSpecified { get; set; }
        
        /// <summary>
        /// <para>Monto del cargo</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Monto del cargo")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("MontoCargo")]
        public decimal MontoCargo { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("OtrosCargosTypeTipoDocumento", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    public enum OtrosCargosTypeTipoDocumento
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
        
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,
        
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
        
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
        
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
        
        [System.Xml.Serialization.XmlEnumAttribute("06")]
        Item06,
        
        [System.Xml.Serialization.XmlEnumAttribute("07")]
        Item07,
        
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Item99,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CodigoMonedaType", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CodigoMonedaType
    {
        
        /// <summary>
        /// <para>Código de la moneda de acuerdo al ISO 4217</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código de la moneda de acuerdo al ISO 4217")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("CodigoMoneda")]
        public CodigoMonedaTypeCodigoMoneda CodigoMoneda { get; set; }
        
        /// <summary>
        /// <para>Tipo de cambio</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tipo de cambio")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TipoCambio")]
        public decimal TipoCambio { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("CodigoMonedaTypeCodigoMoneda", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    public enum CodigoMonedaTypeCodigoMoneda
    {
        
        AED,
        
        AFN,
        
        ALL,
        
        AMD,
        
        ANG,
        
        AOA,
        
        ARS,
        
        AUD,
        
        AWG,
        
        AZN,
        
        BAM,
        
        BBD,
        
        BDT,
        
        BGN,
        
        BHD,
        
        BIF,
        
        BMD,
        
        BND,
        
        BOB,
        
        BOV,
        
        BRL,
        
        BSD,
        
        BTN,
        
        BWP,
        
        BYR,
        
        BZD,
        
        CAD,
        
        CDF,
        
        CHE,
        
        CHF,
        
        CHW,
        
        CLF,
        
        CLP,
        
        CNY,
        
        COP,
        
        COU,
        
        CRC,
        
        CUC,
        
        CUP,
        
        CVE,
        
        CZK,
        
        DJF,
        
        DKK,
        
        DOP,
        
        DZD,
        
        EGP,
        
        ERN,
        
        ETB,
        
        EUR,
        
        FJD,
        
        FKP,
        
        GBP,
        
        GEL,
        
        GHS,
        
        GIP,
        
        GMD,
        
        GNF,
        
        GTQ,
        
        GYD,
        
        HKD,
        
        HNL,
        
        HRK,
        
        HTG,
        
        HUF,
        
        IDR,
        
        ILS,
        
        INR,
        
        IQD,
        
        IRR,
        
        ISK,
        
        JMD,
        
        JOD,
        
        JPY,
        
        KES,
        
        KGS,
        
        KHR,
        
        KMF,
        
        KPW,
        
        KRW,
        
        KWD,
        
        KYD,
        
        KZT,
        
        LAK,
        
        LBP,
        
        LKR,
        
        LRD,
        
        LSL,
        
        LYD,
        
        MAD,
        
        MDL,
        
        MGA,
        
        MKD,
        
        MMK,
        
        MNT,
        
        MOP,
        
        MRO,
        
        MUR,
        
        MVR,
        
        MWK,
        
        MXN,
        
        MXV,
        
        MYR,
        
        MZN,
        
        NAD,
        
        NGN,
        
        NIO,
        
        NOK,
        
        NPR,
        
        NZD,
        
        OMR,
        
        PAB,
        
        PEN,
        
        PGK,
        
        PHP,
        
        PKR,
        
        PLN,
        
        PYG,
        
        QAR,
        
        RON,
        
        RSD,
        
        RUB,
        
        RWF,
        
        SAR,
        
        SBD,
        
        SCR,
        
        SDG,
        
        SEK,
        
        SGD,
        
        SHP,
        
        SLL,
        
        SOS,
        
        SRD,
        
        SSP,
        
        STD,
        
        SVC,
        
        SYP,
        
        SZL,
        
        THB,
        
        TJS,
        
        TMT,
        
        TND,
        
        TOP,
        
        TRY,
        
        TTD,
        
        TWD,
        
        TZS,
        
        UAH,
        
        UGX,
        
        USD,
        
        USN,
        
        UYI,
        
        UYU,
        
        UZS,
        
        VEF,
        
        VND,
        
        VUV,
        
        WST,
        
        XAF,
        
        XAG,
        
        XAU,
        
        XBA,
        
        XBB,
        
        XBC,
        
        XBD,
        
        XCD,
        
        XDR,
        
        XOF,
        
        XPD,
        
        XPF,
        
        XPT,
        
        XSU,
        
        XTS,
        
        XUA,
        
        XXX,
        
        YER,
        
        ZAR,
        
        ZMW,
        
        ZWL,
    }
    
    /// <summary>
    /// <para>Unidades de Medida basadas en el estándar RTC 443:2010</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Unidades de Medida basadas en el estándar RTC 443:2010")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("UnidadMedidaType", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    public enum UnidadMedidaType
    {
        
        /// <summary>
        /// <para>Alquiler de uso habitacional</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Alquiler de uso habitacional")]
        Al,
        
        /// <summary>
        /// <para>Alquiler de uso comercial</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Alquiler de uso comercial")]
        Alc,
        
        /// <summary>
        /// <para>Comisiones</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Comisiones")]
        Cm,
        
        /// <summary>
        /// <para>Intereses</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Intereses")]
        I,
        
        /// <summary>
        /// <para>Otro tipo de servicios</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Otro tipo de servicios")]
        Os,
        
        /// <summary>
        /// <para>Servicios Profesionales</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Servicios Profesionales")]
        Sp,
        
        /// <summary>
        /// <para>Servicios Personales</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Servicios Personales")]
        Spe,
        
        /// <summary>
        /// <para>Servicios Técnicos</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Servicios Técnicos")]
        St,
        
        /// <summary>
        /// <para>Día</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Día")]
        [System.Xml.Serialization.XmlEnumAttribute("d")]
        D,
        
        /// <summary>
        /// <para>Metro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Metro")]
        [System.Xml.Serialization.XmlEnumAttribute("m")]
        M,
        
        /// <summary>
        /// <para>Kilogramo</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Kilogramo")]
        [System.Xml.Serialization.XmlEnumAttribute("kg")]
        Kg,
        
        /// <summary>
        /// <para>Segundo</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Segundo")]
        [System.Xml.Serialization.XmlEnumAttribute("s")]
        S,
        
        /// <summary>
        /// <para>Ampere</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Ampere")]
        A,
        
        /// <summary>
        /// <para>Kelvin</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Kelvin")]
        K,
        
        /// <summary>
        /// <para>Mol</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Mol")]
        [System.Xml.Serialization.XmlEnumAttribute("mol")]
        Mol,
        
        /// <summary>
        /// <para>Candela</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Candela")]
        [System.Xml.Serialization.XmlEnumAttribute("cd")]
        Cd,
        
        /// <summary>
        /// <para>metro cuadrado</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("metro cuadrado")]
        [System.Xml.Serialization.XmlEnumAttribute("m²")]
        M_,
        
        /// <summary>
        /// <para>metro cúbico</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("metro cúbico")]
        [System.Xml.Serialization.XmlEnumAttribute("m³")]
        M_1,
        
        /// <summary>
        /// <para>metro por segundo</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("metro por segundo")]
        [System.Xml.Serialization.XmlEnumAttribute("m/s")]
        MSlashS,
        
        /// <summary>
        /// <para>metro por segundo cuadrado</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("metro por segundo cuadrado")]
        [System.Xml.Serialization.XmlEnumAttribute("m/s²")]
        MSlashS_,
        
        /// <summary>
        /// <para>1 por metro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("1 por metro")]
        [System.Xml.Serialization.XmlEnumAttribute("1/m")]
        Item1SlashM,
        
        /// <summary>
        /// <para>kilogramo por metro cúbico</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("kilogramo por metro cúbico")]
        [System.Xml.Serialization.XmlEnumAttribute("kg/m³")]
        KgSlashM_,
        
        /// <summary>
        /// <para>ampere por metro cuadrado</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ampere por metro cuadrado")]
        [System.Xml.Serialization.XmlEnumAttribute("A/m²")]
        ASlashM_,
        
        /// <summary>
        /// <para>ampere por metro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ampere por metro")]
        [System.Xml.Serialization.XmlEnumAttribute("A/m")]
        ASlashM,
        
        /// <summary>
        /// <para>mol por metro cúbico</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("mol por metro cúbico")]
        [System.Xml.Serialization.XmlEnumAttribute("mol/m³")]
        MolSlashM_,
        
        /// <summary>
        /// <para>candela por metro cuadrado</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("candela por metro cuadrado")]
        [System.Xml.Serialization.XmlEnumAttribute("cd/m²")]
        CdSlashM_,
        
        /// <summary>
        /// <para>uno (indice de refracción)</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("uno (indice de refracción)")]
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <summary>
        /// <para>radián</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("radián")]
        [System.Xml.Serialization.XmlEnumAttribute("rad")]
        Rad,
        
        /// <summary>
        /// <para>estereorradián</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("estereorradián")]
        [System.Xml.Serialization.XmlEnumAttribute("sr")]
        Sr,
        
        /// <summary>
        /// <para>hertz</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("hertz")]
        Hz,
        
        /// <summary>
        /// <para>newton</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("newton")]
        N,
        
        /// <summary>
        /// <para>pascal</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pascal")]
        Pa,
        
        /// <summary>
        /// <para>Joule</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Joule")]
        J,
        
        /// <summary>
        /// <para>Watt</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Watt")]
        W,
        
        /// <summary>
        /// <para>coulomb</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("coulomb")]
        C,
        
        /// <summary>
        /// <para>volt</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("volt")]
        V,
        
        /// <summary>
        /// <para>farad</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("farad")]
        F,
        
        /// <summary>
        /// <para>ohm</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("ohm")]
        Ω,
        
        /// <summary>
        /// <para>siemens</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("siemens")]
        [System.Xml.Serialization.XmlEnumAttribute("S")]
        S1,
        
        /// <summary>
        /// <para>weber</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("weber")]
        Wb,
        
        /// <summary>
        /// <para>tesla</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("tesla")]
        T,
        
        /// <summary>
        /// <para>henry</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("henry")]
        H,
        
        /// <summary>
        /// <para>grado Celsius</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("grado Celsius")]
        [System.Xml.Serialization.XmlEnumAttribute("°C")]
        Item_C,
        
        /// <summary>
        /// <para>lumen</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("lumen")]
        [System.Xml.Serialization.XmlEnumAttribute("lm")]
        Lm,
        
        /// <summary>
        /// <para>lux</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("lux")]
        [System.Xml.Serialization.XmlEnumAttribute("lx")]
        Lx,
        
        /// <summary>
        /// <para>Becquerel</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Becquerel")]
        Bq,
        
        /// <summary>
        /// <para>gray</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("gray")]
        Gy,
        
        /// <summary>
        /// <para>sievert</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("sievert")]
        Sv,
        
        /// <summary>
        /// <para>katal</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("katal")]
        [System.Xml.Serialization.XmlEnumAttribute("kat")]
        Kat,
        
        /// <summary>
        /// <para>pascal segundo</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pascal segundo")]
        [System.Xml.Serialization.XmlEnumAttribute("Pa·s")]
        Pa_S,
        
        /// <summary>
        /// <para>newton metro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("newton metro")]
        [System.Xml.Serialization.XmlEnumAttribute("N·m")]
        N_M,
        
        /// <summary>
        /// <para>newton por metro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("newton por metro")]
        [System.Xml.Serialization.XmlEnumAttribute("N/m")]
        NSlashM,
        
        /// <summary>
        /// <para>radián por segundo</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("radián por segundo")]
        [System.Xml.Serialization.XmlEnumAttribute("rad/s")]
        RadSlashS,
        
        /// <summary>
        /// <para>radián por segundo cuadrado</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("radián por segundo cuadrado")]
        [System.Xml.Serialization.XmlEnumAttribute("rad/s²")]
        RadSlashS_,
        
        /// <summary>
        /// <para>watt por metro cuadrado</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("watt por metro cuadrado")]
        [System.Xml.Serialization.XmlEnumAttribute("W/m²")]
        WSlashM_,
        
        /// <summary>
        /// <para>joule por kelvin</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("joule por kelvin")]
        [System.Xml.Serialization.XmlEnumAttribute("J/K")]
        JSlashK,
        
        /// <summary>
        /// <para>joule por kilogramo kelvin</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("joule por kilogramo kelvin")]
        [System.Xml.Serialization.XmlEnumAttribute("J/(kg·K)")]
        JSlashLeftParenthesisKg_KRightParenthesis,
        
        /// <summary>
        /// <para>joule por kilogramo</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("joule por kilogramo")]
        [System.Xml.Serialization.XmlEnumAttribute("J/kg")]
        JSlashKg,
        
        /// <summary>
        /// <para>watt por metro kevin</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("watt por metro kevin")]
        [System.Xml.Serialization.XmlEnumAttribute("W/(m·K)")]
        WSlashLeftParenthesisM_KRightParenthesis,
        
        /// <summary>
        /// <para>joule por metro cúbico</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("joule por metro cúbico")]
        [System.Xml.Serialization.XmlEnumAttribute("J/m³")]
        JSlashM_,
        
        /// <summary>
        /// <para>volt por metro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("volt por metro")]
        [System.Xml.Serialization.XmlEnumAttribute("V/m")]
        VSlashM,
        
        /// <summary>
        /// <para>coulomb por metro cúbico</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("coulomb por metro cúbico")]
        [System.Xml.Serialization.XmlEnumAttribute("C/m³")]
        CSlashM_,
        
        /// <summary>
        /// <para>coulomb por metro cuadrado</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("coulomb por metro cuadrado")]
        [System.Xml.Serialization.XmlEnumAttribute("C/m²")]
        CSlashM_1,
        
        /// <summary>
        /// <para>farad por metro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("farad por metro")]
        [System.Xml.Serialization.XmlEnumAttribute("F/m")]
        FSlashM,
        
        /// <summary>
        /// <para>henry por metro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("henry por metro")]
        [System.Xml.Serialization.XmlEnumAttribute("H/m")]
        HSlashM,
        
        /// <summary>
        /// <para>joule por mol</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("joule por mol")]
        [System.Xml.Serialization.XmlEnumAttribute("J/mol")]
        JSlashMol,
        
        /// <summary>
        /// <para>joule por mol kelvin</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("joule por mol kelvin")]
        [System.Xml.Serialization.XmlEnumAttribute("J/(mol·K)")]
        JSlashLeftParenthesisMol_KRightParenthesis,
        
        /// <summary>
        /// <para>coulomb por kilogramo</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("coulomb por kilogramo")]
        [System.Xml.Serialization.XmlEnumAttribute("C/kg")]
        CSlashKg,
        
        /// <summary>
        /// <para>gray por segundo</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("gray por segundo")]
        [System.Xml.Serialization.XmlEnumAttribute("Gy/s")]
        GySlashS,
        
        /// <summary>
        /// <para>watt por estereorradián</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("watt por estereorradián")]
        [System.Xml.Serialization.XmlEnumAttribute("W/sr")]
        WSlashSr,
        
        /// <summary>
        /// <para>watt por metro cuadrado estereorradián</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("watt por metro cuadrado estereorradián")]
        [System.Xml.Serialization.XmlEnumAttribute("W/(m²·sr)")]
        WSlashLeftParenthesisM_SrRightParenthesis,
        
        /// <summary>
        /// <para>katal por metro cúbico</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("katal por metro cúbico")]
        [System.Xml.Serialization.XmlEnumAttribute("kat/m³")]
        KatSlashM_,
        
        /// <summary>
        /// <para>minuto</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("minuto")]
        [System.Xml.Serialization.XmlEnumAttribute("min")]
        Min,
        
        /// <summary>
        /// <para>hora</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("hora")]
        [System.Xml.Serialization.XmlEnumAttribute("h")]
        H1,
        
        /// <summary>
        /// <para>grado</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("grado")]
        º,
        
        /// <summary>
        /// <para>minuto</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("minuto")]
        [System.Xml.Serialization.XmlEnumAttribute("´")]
        Item_,
        
        /// <summary>
        /// <para>segundo</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("segundo")]
        [System.Xml.Serialization.XmlEnumAttribute("´´")]
        Item_1,
        
        /// <summary>
        /// <para>litro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("litro")]
        L,
        
        /// <summary>
        /// <para>tonelada</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("tonelada")]
        [System.Xml.Serialization.XmlEnumAttribute("t")]
        T1,
        
        /// <summary>
        /// <para>neper</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("neper")]
        Np,
        
        /// <summary>
        /// <para>bel</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("bel")]
        B,
        
        /// <summary>
        /// <para>electronvolt</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("electronvolt")]
        [System.Xml.Serialization.XmlEnumAttribute("eV")]
        EV,
        
        /// <summary>
        /// <para>unidad de masa atómica unificada</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("unidad de masa atómica unificada")]
        [System.Xml.Serialization.XmlEnumAttribute("u")]
        U,
        
        /// <summary>
        /// <para>unidad astronómica</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("unidad astronómica")]
        [System.Xml.Serialization.XmlEnumAttribute("ua")]
        Ua,
        
        /// <summary>
        /// <para>unidad</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("unidad")]
        Unid,
        
        /// <summary>
        /// <para>galón</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("galón")]
        Gal,
        
        /// <summary>
        /// <para>gramo</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("gramo")]
        [System.Xml.Serialization.XmlEnumAttribute("g")]
        G,
        
        /// <summary>
        /// <para>kilometro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("kilometro")]
        Km,
        
        /// <summary>
        /// <para>kilovatios</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("kilovatios")]
        Kw,
        
        /// <summary>
        /// <para>pulgada</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("pulgada")]
        [System.Xml.Serialization.XmlEnumAttribute("ln")]
        Ln,
        
        /// <summary>
        /// <para>centimetro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("centimetro")]
        [System.Xml.Serialization.XmlEnumAttribute("cm")]
        Cm1,
        
        /// <summary>
        /// <para>mililitro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("mililitro")]
        [System.Xml.Serialization.XmlEnumAttribute("mL")]
        ML,
        
        /// <summary>
        /// <para>milimetro</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("milimetro")]
        [System.Xml.Serialization.XmlEnumAttribute("mm")]
        Mm,
        
        /// <summary>
        /// <para>onzas</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("onzas")]
        Oz,
        
        Otros,
    }
    
    /// <summary>
    /// <para>Elemento Raiz del Tiquete Electrónico</para>
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Elemento Raiz del Tiquete Electrónico")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TiqueteElectronico", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("TiqueteElectronico", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    public partial class TiqueteElectronico
    {
        
        /// <summary>
        /// <para>Corresponde a la clave del comprobante. Es un campo de 50
        ///                            posiciones y se tiene que utilizar para la consulta del código QR. Ver
        ///                            nota 1 y 4.1</para>
        /// <para>Tipo de dato String que solo permite el uso de números con un largo de
        ///                50.</para>
        /// <para xml:lang="en">Pattern: \d{50,50}.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Corresponde a la clave del comprobante. Es un campo de 50 posiciones y se tiene q" +
            "ue utilizar para la consulta del código QR. Ver nota 1 y 4.1")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\d{50,50}")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Clave")]
        public string Clave { get; set; }
        
        /// <summary>
        /// <para>Se debe indicar el código de la actividad económica a la
        ///                            cual corresponde el comprobante electrónico</para>
        /// <para xml:lang="en">Minimum length: 6.</para>
        /// <para xml:lang="en">Maximum length: 6.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Se debe indicar el código de la actividad económica a la cual corresponde el comp" +
            "robante electrónico")]
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(6)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(6)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("CodigoActividad")]
        public string CodigoActividad { get; set; }
        
        /// <summary>
        /// <para>Numeración consecutiva del comprobante</para>
        /// <para>Tipo de dato String que solo permite el uso de números con un largo de
        ///                20</para>
        /// <para xml:lang="en">Pattern: \d{20,20}.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Numeración consecutiva del comprobante")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\d{20,20}")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("NumeroConsecutivo")]
        public string NumeroConsecutivo { get; set; }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("FechaEmision", DataType="dateTime")]
        public System.DateTime FechaEmision { get; set; }
        
        /// <summary>
        /// <para>Emisor del documento</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Emisor del documento")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Emisor")]
        public EmisorType Emisor { get; set; }
        
        /// <summary>
        /// <para>Receptor del documento</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Receptor del documento")]
        [System.Xml.Serialization.XmlElementAttribute("Receptor")]
        public ReceptorType Receptor { get; set; }
        
        /// <summary>
        /// <para>Condiciones de la venta: 01 Contado, 02 Crédito, 03
        ///                            Consignación, 04 Apartado, 05 Arrendamiento con opción de compra, 06
        ///                            Arrendamiento en función financiera, 07 Cobro a favor de un tercero, 08
        ///                            servicxios prestados al estado a credito, 09 pago del servicio prestado
        ///                            al estado, 99 Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Condiciones de la venta: 01 Contado, 02 Crédito, 03 Consignación, 04 Apartado, 05 Arrendamiento con opción de compra, 06 Arrendamiento en función financiera, 07 Cobro a favor de un tercero, 08 servicxios prestados al estado a credito, 09 pago del servicio prestado al estado, 99 Otros")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("CondicionVenta")]
        public TiqueteElectronicoCondicionVenta CondicionVenta { get; set; }
        
        /// <summary>
        /// <para>Plazo del crédito, es obligatorio cuando la venta del
        ///                            producto o prestación del servicio sea a crédito</para>
        /// <para xml:lang="en">Maximum length: 10.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Plazo del crédito, es obligatorio cuando la venta del producto o prestación del s" +
            "ervicio sea a crédito")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(10)]
        [System.Xml.Serialization.XmlElementAttribute("PlazoCredito")]
        public string PlazoCredito { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TiqueteElectronicoMedioPago> _medioPago;
        
        /// <summary>
        /// <para>Corresponde al medio de pago empleado: 01 Efectivo, 02
        ///                            Tarjeta, 03 Cheque, 04 Transferencia - depósito bancario, 05 - Recaudado
        ///                            por terceros, 99 Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Corresponde al medio de pago empleado: 01 Efectivo, 02 Tarjeta, 03 Cheque, 04 Tra" +
            "nsferencia - depósito bancario, 05 - Recaudado por terceros, 99 Otros")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("MedioPago")]
        public System.Collections.ObjectModel.Collection<TiqueteElectronicoMedioPago> MedioPago
        {
            get
            {
                return _medioPago;
            }
            set
            {
                _medioPago = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TiqueteElectronico" /> class.</para>
        /// </summary>
        public TiqueteElectronico()
        {
            this._medioPago = new System.Collections.ObjectModel.Collection<TiqueteElectronicoMedioPago>();
            this._detalleServicio = new System.Collections.ObjectModel.Collection<TiqueteElectronicoDetalleServicioLineaDetalle>();
            this._otrosCargos = new System.Collections.ObjectModel.Collection<OtrosCargosType>();
            this._informacionReferencia = new System.Collections.ObjectModel.Collection<TiqueteElectronicoInformacionReferencia>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TiqueteElectronicoDetalleServicioLineaDetalle> _detalleServicio;
        
        /// <summary>
        /// <para>Detalle de la mercancia o servicio prestado.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Detalle de la mercancia o servicio prestado.")]
        [System.Xml.Serialization.XmlArrayAttribute("DetalleServicio")]
        [System.Xml.Serialization.XmlArrayItemAttribute("LineaDetalle", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
        public System.Collections.ObjectModel.Collection<TiqueteElectronicoDetalleServicioLineaDetalle> DetalleServicio
        {
            get
            {
                return _detalleServicio;
            }
            set
            {
                _detalleServicio = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DetalleServicio collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DetalleServicioSpecified
        {
            get
            {
                return (this.DetalleServicio.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OtrosCargosType> _otrosCargos;
        
        /// <summary>
        /// <para>Información sobre otros cargos</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Información sobre otros cargos")]
        [System.Xml.Serialization.XmlElementAttribute("OtrosCargos")]
        public System.Collections.ObjectModel.Collection<OtrosCargosType> OtrosCargos
        {
            get
            {
                return _otrosCargos;
            }
            set
            {
                _otrosCargos = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtrosCargos collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtrosCargosSpecified
        {
            get
            {
                return (this.OtrosCargos.Count != 0);
            }
        }
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ResumenFactura")]
        public TiqueteElectronicoResumenFactura ResumenFactura { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TiqueteElectronicoInformacionReferencia> _informacionReferencia;
        
        [System.Xml.Serialization.XmlElementAttribute("InformacionReferencia")]
        public System.Collections.ObjectModel.Collection<TiqueteElectronicoInformacionReferencia> InformacionReferencia
        {
            get
            {
                return _informacionReferencia;
            }
            set
            {
                _informacionReferencia = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the InformacionReferencia collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InformacionReferenciaSpecified
        {
            get
            {
                return (this.InformacionReferencia.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Otros")]
        public TiqueteElectronicoOtros Otros { get; set; }
  }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TiqueteElectronicoCondicionVenta", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    public enum TiqueteElectronicoCondicionVenta
    {
        
        /// <summary>
        /// <para>Contado</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Contado")]
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Contado,
        
        /// <summary>
        /// <para>Crédito</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Crédito")]
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Credito,
        
        /// <summary>
        /// <para>Consignación</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Consignación")]
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Consignacion,
        
        /// <summary>
        /// <para>Apartado</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Apartado")]
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Apartado,
        
        /// <summary>
        /// <para>Arrendamiento con opción de compra</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Arrendamiento con opción de compra")]
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        ArrendamientoConOpcionDeCompra,
        
        /// <summary>
        /// <para>Arrendamiento en función financiera</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Arrendamiento en función financiera")]
        [System.Xml.Serialization.XmlEnumAttribute("06")]
        ArrendamientoEnFuncionFinanciera,
        
        /// <summary>
        /// <para>Cobro a favor de un tercero</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cobro a favor de un tercero")]
        [System.Xml.Serialization.XmlEnumAttribute("07")]
        CobroAFavorDeUnTercero,
        
        /// <summary>
        /// <para>Servicios prestados al Estado a crédito</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Servicios prestados al Estado a crédito")]
        [System.Xml.Serialization.XmlEnumAttribute("08")]
        ServiciosPrestadosAlEstadoACredito,
        
        /// <summary>
        /// <para>Pago del servicios prestado al Estado</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Pago del servicios prestado al Estado")]
        [System.Xml.Serialization.XmlEnumAttribute("09")]
        PagoDelServiciosPrestadoAlEstado,
        
        /// <summary>
        /// <para>Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Otros")]
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Otros,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TiqueteElectronicoMedioPago", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    public enum TiqueteElectronicoMedioPago
    {
        
        /// <summary>
        /// <para>Efectivo</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Efectivo")]
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Efectivo,
        
        /// <summary>
        /// <para>Tarjeta</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tarjeta")]
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Tarjeta,
        
        /// <summary>
        /// <para>Cheque</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cheque")]
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Cheque,
        
        /// <summary>
        /// <para>Transferencia - depósito bancario</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Transferencia - depósito bancario")]
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Transferencia_DepositoBancario,
        
        /// <summary>
        /// <para>Recaudado por terceros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Recaudado por terceros")]
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        RecaudadoPorTerceros,
        
        /// <summary>
        /// <para>Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Otros")]
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Otros,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TiqueteElectronicoDetalleServicio", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TiqueteElectronicoDetalleServicio
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TiqueteElectronicoDetalleServicioLineaDetalle> _lineaDetalle;
        
        /// <summary>
        /// <para>Cada línea del detalle de la mercancia o
        ///                                        servicio prestado.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cada línea del detalle de la mercancia o servicio prestado.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("LineaDetalle")]
        public System.Collections.ObjectModel.Collection<TiqueteElectronicoDetalleServicioLineaDetalle> LineaDetalle
        {
            get
            {
                return _lineaDetalle;
            }
            set
            {
                _lineaDetalle = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TiqueteElectronicoDetalleServicio" /> class.</para>
        /// </summary>
        public TiqueteElectronicoDetalleServicio()
        {
            this._lineaDetalle = new System.Collections.ObjectModel.Collection<TiqueteElectronicoDetalleServicioLineaDetalle>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TiqueteElectronicoDetalleServicioLineaDetalle", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TiqueteElectronicoDetalleServicioLineaDetalle
    {
        
        /// <summary>
        /// <para>Número de línea del detalle</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Número de línea del detalle")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("NumeroLinea")]
        public string NumeroLinea { get; set; }
        
        /// <summary>
        /// <para>Código de Producto/servicio</para>
        /// <para xml:lang="en">Minimum length: 13.</para>
        /// <para xml:lang="en">Maximum length: 13.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código de Producto/servicio")]
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(13)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(13)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Codigo")]
        public string Codigo { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<CodigoType> _codigoComercial;
        
        [System.Xml.Serialization.XmlElementAttribute("CodigoComercial")]
        public System.Collections.ObjectModel.Collection<CodigoType> CodigoComercial
        {
            get
            {
                return _codigoComercial;
            }
            set
            {
                _codigoComercial = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the CodigoComercial collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodigoComercialSpecified
        {
            get
            {
                return (this.CodigoComercial.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TiqueteElectronicoDetalleServicioLineaDetalle" /> class.</para>
        /// </summary>
        public TiqueteElectronicoDetalleServicioLineaDetalle()
        {
            this._codigoComercial = new System.Collections.ObjectModel.Collection<CodigoType>();
            this._descuento = new System.Collections.ObjectModel.Collection<DescuentoType>();
            this._impuesto = new System.Collections.ObjectModel.Collection<ImpuestoType>();
        }
        
        /// <summary>
        /// <para>Cantidad</para>
        /// <para xml:lang="en">Total number of digits: 16.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 3.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cantidad")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("Cantidad")]
        public decimal Cantidad { get; set; }
        
        /// <summary>
        /// <para>Unidad de medida</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Unidad de medida")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("UnidadMedida")]
        public UnidadMedidaType UnidadMedida { get; set; }
        
        /// <summary>
        /// <para>Unidad de medida comercial</para>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Unidad de medida comercial")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Xml.Serialization.XmlElementAttribute("UnidadMedidaComercial")]
        public string UnidadMedidaComercial { get; set; }
        
        /// <summary>
        /// <para>Detalle de la mercancia
        ///                                                    transferida o servicio prestado</para>
        /// <para xml:lang="en">Maximum length: 200.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Detalle de la mercancia transferida o servicio prestado")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(200)]
        [System.Xml.Serialization.XmlElementAttribute("Detalle")]
        public string Detalle { get; set; }
        
        /// <summary>
        /// <para>Precio Unitario</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Precio Unitario")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("PrecioUnitario")]
        public decimal PrecioUnitario { get; set; }
        
        /// <summary>
        /// <para>Se obtiene de multiplicar el campo
        ///                                                    cantidad por el campo precio unitario</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Se obtiene de multiplicar el campo cantidad por el campo precio unitario")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("MontoTotal")]
        public decimal MontoTotal { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DescuentoType> _descuento;
        
        [System.Xml.Serialization.XmlElementAttribute("Descuento")]
        public System.Collections.ObjectModel.Collection<DescuentoType> Descuento
        {
            get
            {
                return _descuento;
            }
            set
            {
                _descuento = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Descuento collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DescuentoSpecified
        {
            get
            {
                return (this.Descuento.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Se obtiene de la resta del campo
        ///                                                    monto total menos monto de descuento concedido</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Se obtiene de la resta del campo monto total menos monto de descuento concedido")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("SubTotal")]
        public decimal SubTotal { get; set; }
        
        /// <summary>
        /// <para>Base imponible especial</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Base imponible especial")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("BaseImponible")]
        public decimal BaseImponible { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BaseImponible property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BaseImponibleSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ImpuestoType> _impuesto;
        
        /// <summary>
        /// <para>Cuando el producto o servicio este
        ///                                                    gravado con algún impuesto se debe indicar cada
        ///                                                    uno de ellos.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Cuando el producto o servicio este gravado con algún impuesto se debe indicar cad" +
            "a uno de ellos.")]
        [System.Xml.Serialization.XmlElementAttribute("Impuesto")]
        public System.Collections.ObjectModel.Collection<ImpuestoType> Impuesto
        {
            get
            {
                return _impuesto;
            }
            set
            {
                _impuesto = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Impuesto collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImpuestoSpecified
        {
            get
            {
                return (this.Impuesto.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Impuesto Neto</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Impuesto Neto")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("ImpuestoNeto")]
        public decimal ImpuestoNeto { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ImpuestoNeto property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImpuestoNetoSpecified { get; set; }
        
        /// <summary>
        /// <para>Existe dos maneras de obtener el
        ///                                                    resultado del campo: - Cuando no existe
        ///                                                    exoneración, se obtiene de la sumatoria de los
        ///                                                    campos “subtotal”, “monto del impuesto” . -
        ///                                                    Cuando posee una exoneración, se obtiene de la
        ///                                                    sumatoria de los campos “Subtotal”, “Impuesto
        ///                                                    Neto”</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Existe dos maneras de obtener el resultado del campo: - Cuando no existe exoneración, se obtiene de la sumatoria de los campos “subtotal”, “monto del impuesto” . - Cuando posee una exoneración, se obtiene de la sumatoria de los campos “Subtotal”, “Impuesto Neto”")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("MontoTotalLinea")]
        public decimal MontoTotalLinea { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TiqueteElectronicoResumenFactura", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TiqueteElectronicoResumenFactura
    {
        
        [System.Xml.Serialization.XmlElementAttribute("CodigoTipoMoneda")]
        public CodigoMonedaType CodigoTipoMoneda { get; set; }
        
        /// <summary>
        /// <para>Total de los servicios gravados con IV</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Total de los servicios gravados con IV")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalServGravados")]
        public decimal TotalServGravados { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalServGravados property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalServGravadosSpecified { get; set; }
        
        /// <summary>
        /// <para>Total de los servicios exentos de IV</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Total de los servicios exentos de IV")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalServExentos")]
        public decimal TotalServExentos { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalServExentos property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalServExentosSpecified { get; set; }
        
        /// <summary>
        /// <para>Total servicios exonerados del IVA</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Total servicios exonerados del IVA")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalServExonerado")]
        public decimal TotalServExonerado { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalServExonerado property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalServExoneradoSpecified { get; set; }
        
        /// <summary>
        /// <para>Total mercancias gravadas con IV</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Total mercancias gravadas con IV")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalMercanciasGravadas")]
        public decimal TotalMercanciasGravadas { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalMercanciasGravadas property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalMercanciasGravadasSpecified { get; set; }
        
        /// <summary>
        /// <para>Total mercancias exentas de IV</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Total mercancias exentas de IV")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalMercanciasExentas")]
        public decimal TotalMercanciasExentas { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalMercanciasExentas property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalMercanciasExentasSpecified { get; set; }
        
        /// <summary>
        /// <para>Total mercancías exoneradas del IVA</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Total mercancías exoneradas del IVA")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalMercExonerada")]
        public decimal TotalMercExonerada { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalMercExonerada property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalMercExoneradaSpecified { get; set; }
        
        /// <summary>
        /// <para>Total gravado. se obtiene de la suma del total
        ///                                        servicios gravados con IV + total mercancias gravadas con IV</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Total gravado. se obtiene de la suma del total servicios gravados con IV + total " +
            "mercancias gravadas con IV")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalGravado")]
        public decimal TotalGravado { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalGravado property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalGravadoSpecified { get; set; }
        
        /// <summary>
        /// <para>Total Exento, se obtiene de la suma de los
        ///                                        campos total servicios exentos IV mas total mercancias
        ///                                        exentas IV</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Total Exento, se obtiene de la suma de los campos total servicios exentos IV mas " +
            "total mercancias exentas IV")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalExento")]
        public decimal TotalExento { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalExento property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalExentoSpecified { get; set; }
        
        /// <summary>
        /// <para>Se obtiene de la suma de los campos “total
        ///                                        servicios exonerados de IVA” mas “total de mercancías
        ///                                        exoneradas del IVA”.</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Se obtiene de la suma de los campos “total servicios exonerados de IVA” mas “tota" +
            "l de mercancías exoneradas del IVA”.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalExonerado")]
        public decimal TotalExonerado { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalExonerado property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalExoneradoSpecified { get; set; }
        
        /// <summary>
        /// <para>Se obtiene de la sumatoria de los campos
        ///                                        “total gravado”, “total exento” y “Total Exonerado”.</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Se obtiene de la sumatoria de los campos “total gravado”, “total exento” y “Total" +
            " Exonerado”.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TotalVenta")]
        public decimal TotalVenta { get; set; }
        
        /// <summary>
        /// <para>Se obtiene de la suma de todos los campo de
        ///                                        monto de descuento concedido</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Se obtiene de la suma de todos los campo de monto de descuento concedido")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalDescuentos")]
        public decimal TotalDescuentos { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalDescuentos property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalDescuentosSpecified { get; set; }
        
        /// <summary>
        /// <para>Se obtiene de la resta de los campos total
        ///                                        venta menos total descuento</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Se obtiene de la resta de los campos total venta menos total descuento")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TotalVentaNeta")]
        public decimal TotalVentaNeta { get; set; }
        
        /// <summary>
        /// <para>Se obtiene de la suma de todos campos monto
        ///                                        del impuesto</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Se obtiene de la suma de todos campos monto del impuesto")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalImpuesto")]
        public decimal TotalImpuesto { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalImpuesto property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalImpuestoSpecified { get; set; }
        
        /// <summary>
        /// <para>IVA Devuelto</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("IVA Devuelto")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalIVADevuelto")]
        public decimal TotalIVADevuelto { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalIVADevuelto property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalIVADevueltoSpecified { get; set; }
        
        /// <summary>
        /// <para>Total Otros Cargos</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Total Otros Cargos")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.Xml.Serialization.XmlElementAttribute("TotalOtrosCargos")]
        public decimal TotalOtrosCargos { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalOtrosCargos property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalOtrosCargosSpecified { get; set; }
        
        /// <summary>
        /// <para>Se obtiene de la suma de los campos “total
        ///                                        venta neta”, “monto total del impuesto” y “total otros
        ///                                        cargos” menos “total IVA devuelto”, en caso de contar con
        ///                                        dichos campos.</para>
        /// <para>Tipo de dato decimal para representar los valores de dinero.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 5.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999.99999.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Se obtiene de la suma de los campos “total venta neta”, “monto total del impuesto" +
            "” y “total otros cargos” menos “total IVA devuelto”, en caso de contar con dicho" +
            "s campos.")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9999999999999.99999", ParseLimitsInInvariantCulture=true, ConvertValueInInvariantCulture=true)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TotalComprobante")]
        public decimal TotalComprobante { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TiqueteElectronicoInformacionReferencia", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TiqueteElectronicoInformacionReferencia
    {
        
        /// <summary>
        /// <para>Tipo de documento de referencia. 01 Factura
        ///                                        electrónica, 02 Nota de débito electrónica, 03 nota de
        ///                                        crédito electrónica, 04 Tiquete electrónico, 05 Nota de
        ///                                        despacho, 06 Contrato, 07 Procedimiento, 08 Comprobante
        ///                                        emitido en contigencia, 09 Devoluicion mercaderia, 10
        ///                                        Sustituye factura rechazada poir Ministerio de Hacienda, 11
        ///                                        Sustituye factura rechazada por el receptor del comprobante,
        ///                                        12 Sustituye factura de exportacion, 13 facturacion mes
        ///                                        vencido, 99 otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Tipo de documento de referencia. 01 Factura electrónica, 02 Nota de débito electrónica, 03 nota de crédito electrónica, 04 Tiquete electrónico, 05 Nota de despacho, 06 Contrato, 07 Procedimiento, 08 Comprobante emitido en contigencia, 09 Devoluicion mercaderia, 10 Sustituye factura rechazada poir Ministerio de Hacienda, 11 Sustituye factura rechazada por el receptor del comprobante, 12 Sustituye factura de exportacion, 13 facturacion mes vencido, 99 otros")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("TipoDoc")]
        public TiqueteElectronicoInformacionReferenciaTipoDoc TipoDoc { get; set; }
        
        /// <summary>
        /// <para>Número de documento de referencia</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Número de documento de referencia")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlElementAttribute("Numero")]
        public string Numero { get; set; }
        
        /// <summary>
        /// <para>Fecha y hora de emisión del documento de
        ///                                        referencia</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Fecha y hora de emisión del documento de referencia")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("FechaEmision", DataType="dateTime")]
        public System.DateTime FechaEmision { get; set; }
        
        /// <summary>
        /// <para>Código de referencia. 01 Anula documento de
        ///                                        referencia, 02 Corrige texto de documento de referencia, 03
        ///                                        Corrige monto, 04 Referencia a otro documento, 05 Sustituye
        ///                                        comprobante provisional por contigencia, 99 Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código de referencia. 01 Anula documento de referencia, 02 Corrige texto de docum" +
            "ento de referencia, 03 Corrige monto, 04 Referencia a otro documento, 05 Sustitu" +
            "ye comprobante provisional por contigencia, 99 Otros")]
        [System.Xml.Serialization.XmlElementAttribute("Codigo")]
        public TiqueteElectronicoInformacionReferenciaCodigo Codigo { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Codigo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodigoSpecified { get; set; }
        
        /// <summary>
        /// <para>Razón de referencia</para>
        /// <para xml:lang="en">Maximum length: 180.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Razón de referencia")]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(180)]
        [System.Xml.Serialization.XmlElementAttribute("Razon")]
        public string Razon { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TiqueteElectronicoInformacionReferenciaTipoDoc", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    public enum TiqueteElectronicoInformacionReferenciaTipoDoc
    {
        
        /// <summary>
        /// <para>Factura electrónica</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Factura electrónica")]
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
        
        /// <summary>
        /// <para>Nota de debido electrónica</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nota de debido electrónica")]
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,
        
        /// <summary>
        /// <para>nota de crédito electrónica</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("nota de crédito electrónica")]
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
        
        /// <summary>
        /// <para>Tiquete electrónico</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tiquete electrónico")]
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
        
        /// <summary>
        /// <para>Nota de despacho</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Nota de despacho")]
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
        
        /// <summary>
        /// <para>Contrato</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Contrato")]
        [System.Xml.Serialization.XmlEnumAttribute("06")]
        Item06,
        
        /// <summary>
        /// <para>Procedimiento</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Procedimiento")]
        [System.Xml.Serialization.XmlEnumAttribute("07")]
        Item07,
        
        /// <summary>
        /// <para>Comprobante emitido en contigencia</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Comprobante emitido en contigencia")]
        [System.Xml.Serialization.XmlEnumAttribute("08")]
        Item08,
        
        [System.Xml.Serialization.XmlEnumAttribute("09")]
        Item09,
        
        [System.Xml.Serialization.XmlEnumAttribute("10")]
        Item10,
        
        [System.Xml.Serialization.XmlEnumAttribute("11")]
        Item11,
        
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12,
        
        [System.Xml.Serialization.XmlEnumAttribute("13")]
        Item13,
        
        /// <summary>
        /// <para>Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Otros")]
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Item99,
        
        [System.Xml.Serialization.XmlEnumAttribute("14")]
        Item14,
        
        [System.Xml.Serialization.XmlEnumAttribute("15")]
        Item15,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TiqueteElectronicoInformacionReferenciaCodigo", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    public enum TiqueteElectronicoInformacionReferenciaCodigo
    {
        
        /// <summary>
        /// <para>Anula documento de referencia</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Anula documento de referencia")]
        [System.Xml.Serialization.XmlEnumAttribute("01")]
        Item01,
        
        /// <summary>
        /// <para>Corrige texto de ocumento de
        ///                                                    referencia</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Corrige texto de ocumento de referencia")]
        [System.Xml.Serialization.XmlEnumAttribute("02")]
        Item02,
        
        /// <summary>
        /// <para>Corrige monto</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Corrige monto")]
        [System.Xml.Serialization.XmlEnumAttribute("03")]
        Item03,
        
        /// <summary>
        /// <para>Referencia a otro documento</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Referencia a otro documento")]
        [System.Xml.Serialization.XmlEnumAttribute("04")]
        Item04,
        
        /// <summary>
        /// <para>Sustituye comprobante provisional
        ///                                                    por contigencia</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Sustituye comprobante provisional por contigencia")]
        [System.Xml.Serialization.XmlEnumAttribute("05")]
        Item05,
        
        /// <summary>
        /// <para>Otros</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Otros")]
        [System.Xml.Serialization.XmlEnumAttribute("99")]
        Item99,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TiqueteElectronicoOtros", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TiqueteElectronicoOtros
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TiqueteElectronicoOtrosOtroTexto> _otroTexto;
        
        /// <summary>
        /// <para>Elemento opcional que se puede utilizar la
        ///                                        almacenar texto.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Elemento opcional que se puede utilizar la almacenar texto.")]
        [System.Xml.Serialization.XmlElementAttribute("OtroTexto")]
        public System.Collections.ObjectModel.Collection<TiqueteElectronicoOtrosOtroTexto> OtroTexto
        {
            get
            {
                return _otroTexto;
            }
            set
            {
                _otroTexto = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtroTexto collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtroTextoSpecified
        {
            get
            {
                return (this.OtroTexto.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TiqueteElectronicoOtros" /> class.</para>
        /// </summary>
        public TiqueteElectronicoOtros()
        {
            this._otroTexto = new System.Collections.ObjectModel.Collection<TiqueteElectronicoOtrosOtroTexto>();
            this._otroContenido = new System.Collections.ObjectModel.Collection<TiqueteElectronicoOtrosOtroContenido>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TiqueteElectronicoOtrosOtroContenido> _otroContenido;
        
        /// <summary>
        /// <para>Elemento opcional que se puede utilizar para
        ///                                        almacenar contenido estructurado.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Elemento opcional que se puede utilizar para almacenar contenido estructurado.")]
        [System.Xml.Serialization.XmlElementAttribute("OtroContenido")]
        public System.Collections.ObjectModel.Collection<TiqueteElectronicoOtrosOtroContenido> OtroContenido
        {
            get
            {
                return _otroContenido;
            }
            set
            {
                _otroContenido = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the OtroContenido collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtroContenidoSpecified
        {
            get
            {
                return (this.OtroContenido.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TiqueteElectronicoOtrosOtroTexto", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TiqueteElectronicoOtrosOtroTexto
    {
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
        
        /// <summary>
        /// <para>Código opcional para facilitar
        ///                                                        la identificación del elemento.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código opcional para facilitar la identificación del elemento.")]
        [System.Xml.Serialization.XmlAttributeAttribute("codigo")]
        public string Codigo { get; set; }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TiqueteElectronicoOtrosOtroContenido", Namespace="https://cdn.comprobanteselectronicos.go.cr/xml-schemas/v4.3/tiqueteElectronico", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TiqueteElectronicoOtrosOtroContenido
    {
        
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement Any { get; set; }
        
        /// <summary>
        /// <para>Código opcional para facilitar la
        ///                                                identificación del elemento.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código opcional para facilitar la identificación del elemento.")]
        [System.Xml.Serialization.XmlAttributeAttribute("codigo")]
        public string Codigo { get; set; }
    }
}
